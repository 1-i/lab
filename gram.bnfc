Prog. Program  ::= [Stm] ;
Fun.  Function ::= "$" Ident "(" [PDecl] ")" ":" Type "do" [Stm] "end";

Dec.  Decl     ::= Ident ":" Type ;
PDec. PDecl	   ::= PMet ":" Type ;

terminator Function "" ;
terminator Stm "" ;
separator  Decl ";" ;
separator  PDecl ";" ;
separator  Exp "," ;

SDecl.   Stm ::= Decl ";"  ;
SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "do" [Stm] "end" ;
SWhile.  Stm ::= "from" Ass "until" Exp "loop" [Stm] "end" ;
SReturn. Stm ::= "return" Exp  ";" ;
SFunc.	 Stm ::= Function ;
DAss.    Ass ::= Exp8 ":=" Exp ";" ;
SAss.	 Stm ::= Ass ;
SCond.	 Stm ::= "if" Exp "then" [Stm] "end" ;
SCondEl. Stm ::= "if" Exp "then" [Stm] "else" [Stm] "end" ;

EOr.	 Exp2 ::= Exp2 "or" Exp3 ;
EAnd.	 Exp3 ::= Exp3 "and" Exp4 ;
ELt.     Exp4 ::= Exp4 "<" Exp5 ;
EGt.	 Exp4 ::= Exp4 ">" Exp5 ;
EAdd.    Exp5 ::= Exp5 "+" Exp6 ;
ESub.    Exp5 ::= Exp5 "-" Exp6 ;
EMul.    Exp6 ::= Exp6 "*" Exp7 ;
EDiv.	 Exp6 ::= Exp6 "/" Exp7 ;
EDeref.	 Exp8 ::= "*" Exp7 ;
ENot.	 Exp8 ::= "!" Exp7 ;
EArr.	 Exp9 ::= Exp9 "[" Exp "]" ;
ECall.   Exp10 ::= Ident "(" [Exp] ")" ;

EVar.    Exp10 ::= Ident ;
EStr.    Exp10 ::= String ;
EInt.    Exp10 ::= Integer ;
EDouble. Exp10 ::= Double ;

EParen.  Exp10 ::= "(" Exp ")" ;

coercions Exp 10 ;

TInt.    Type ::= "int" ;
TDouble. Type ::= "double" ;
TBool.	 Type ::= "bool" ;
TArray.	 Type ::= "array" "[" Type "]" ;
TPtr.    Type ::= "*" Type;

PVal.	 PMet ::= "value" Ident ;
PValres. PMet ::= "valres" Ident ;
PName.	 PMet ::= "name" Ident ;
PRef.    PMet ::= "ref" Ident ;
PImpl.	 PMet ::= Ident ;
