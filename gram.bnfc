Prog. Program  ::= [Stm] ;
Fun.  Function ::= "$" Ident "(" [PDecl] ")" ":" Type "do" [Stm] "end";

Dec.  Decl     ::= Ident ":" Type ;
PDec. PDecl	   ::= PMet ":" Type ;

terminator Function "" ;
terminator Stm "" ;
separator  Decl ";" ;
separator  PDecl ";" ;
separator  Exp "," ;

SNop.	 Stm ::= ";" ;
SDecl.   Stm ::= Decl ";"  ;
SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "do" [Stm] "end" ;
SWhile.	 Stm ::= "until" Exp "loop" [Stm] "end" ;
SWhileA. Stm ::= "from" Ass "until" Exp "loop" [Stm] "end" ;
SReturn. Stm ::= "return" Exp  ";" ;
SFunc.	 Stm ::= Function ;
DAss.    Ass ::= Exp11 ":=" Exp ";" ;
SAss.	 Stm ::= Ass ;
SCond.	 Stm ::= "if" Exp "then" [Stm] "end" ;
SCondEl. Stm ::= "if" Exp "then" [Stm] "else" [Stm] "end" ;
SWInt.	 Stm ::= "writeInt" "(" Exp ")" ";" ;
SRInt.   Stm ::= "readInt()" ";" ;
SWDou.	 Stm ::= "writeDouble" "(" Exp ")" ";" ;
SRDou.	 Stm ::= "readDouble()" ";" ;
SWStr.	 Stm ::= "writeString" "(" Exp ")" ";" ;
SRStr.   Stm ::= "readString()" ";" ;

EOr.	 Exp2 ::= Exp2 "or" Exp3 ;
EAnd.	 Exp3 ::= Exp3 "and" Exp4 ;
EEql.	 Exp4 ::= Exp4 "==" Exp5 ;
ELt.     Exp5 ::= Exp5 "<" Exp6 ;
EGt.	 Exp5 ::= Exp5 ">" Exp6 ;
EAdd.    Exp6 ::= Exp6 "+" Exp7 ;
ESub.    Exp6 ::= Exp6 "-" Exp7 ;
EMul.    Exp7 ::= Exp7 "*" Exp8 ;
EDiv.	 Exp7 ::= Exp7 "/" Exp8 ;
ENot.	 Exp9 ::= "!" Exp8 ;
EDeref.	 Exp11 ::= "*" Exp11 ;
ERefer.	 Exp11 ::= "&" Exp11 ;
EArr.	 Exp12 ::= Exp12 "[" Exp "]" ;
ECall.   Exp13 ::= Ident "(" [Exp] ")" ;
EVar.    Exp13 ::= Ident ;

EStr.    Exp13 ::= String ;
EInt.    Exp13 ::= Integer ;
EChar.	 Exp13 ::= Char ;
EDouble. Exp13 ::= Double ;
ETrue.	 Exp13 ::= "true" ;
EFalse.	 Exp13 ::= "false" ;

EParen.  Exp14 ::= "(" Exp ")" ;

coercions Exp 14 ;

TInt.    Type ::= "int" ;
TDouble. Type ::= "double" ;
TBool.	 Type ::= "bool" ;
TStr.	 Type ::= "string";
TChar.	 Type ::= "char";
TPtr.    Type ::= "*" Type;
TArray.	 Type ::= "array" "[" Type "]" ;
internal TMem.	Type ::= "&" Type ;

PVal.	 PMet ::= "value" Ident ;
PValres. PMet ::= "valres" Ident ;
PName.	 PMet ::= "name" Ident ;
PRef.    PMet ::= "ref" Ident ;
PImpl.	 PMet ::= Ident ;

comment	"--" ;
