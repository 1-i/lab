module SkelGram where

-- Haskell module generated by the BNF converter

import AbsGram
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog stms -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  Fun ident pdecls type_ stms -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Dec ident type_ -> failure x
transPDecl :: PDecl -> Result
transPDecl x = case x of
  PDec pmet type_ -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SDecl decl -> failure x
  SExp exp -> failure x
  SBlock stms -> failure x
  SWhile ass exp stms -> failure x
  SReturn exp -> failure x
  SFunc function -> failure x
  SAss ass -> failure x
  SCond exp stms -> failure x
  SCondEl exp stms1 stms2 -> failure x
transAss :: Ass -> Result
transAss x = case x of
  DAss exp1 exp2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EDeref exp -> failure x
  ENot exp -> failure x
  EArr exp1 exp2 -> failure x
  ECall ident exps -> failure x
  EVar ident -> failure x
  EStr string -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  EParen exp -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TDouble -> failure x
  TBool -> failure x
  TArray type_ -> failure x
  TPtr type_ -> failure x
transPMet :: PMet -> Result
transPMet x = case x of
  PVal ident -> failure x
  PValres ident -> failure x
  PName ident -> failure x
  PRef ident -> failure x
  PImpl ident -> failure x

